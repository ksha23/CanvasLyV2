{"version":3,"file":"calendars.js","names":["_requireJwtAuth","_interopRequireDefault","require","_refreshAccessToken","obj","__esModule","default","User","Calendar","Assignment","DateTime","Router","router","createCalendar","data","calendar","findOne","googleCalendarId","newCalendar","create","error","console","createAssignments","calendarId","assignmentIds","map","assignment","googleEventId","existingAssignments","find","$in","existingAssignmentIds","newAssignmentsData","filter","includes","newAssignments","insertMany","message","_id","assignments","push","save","getAssignmentsByCalendarId","populate","postProcess","googleId","timeZone","calendarData","newData","event","id","name","summary","dueDate","start","dateTime","date","forEach","fromISO","zone","set","hour","minute","toUTC","toISO","getEventsFromGoogle","req","res","user","today","Date","response","fetch","toISOString","headers","Authorization","accessToken","get","requireJwtAuth","refreshTokenMiddleware","exec","status","json","postProcessedData","items","params","findById","_default","exports"],"sources":["../../../src/routes/api/calendars.js"],"sourcesContent":["// const fetch = require('node-fetch');\nconst User = require('../../models/User');\nconst Calendar = require('../../models/Calendar');\nconst Assignment = require('../../models/Assignment');\nconst { DateTime } = require('luxon');\nconst { Router } = require('express');\n\n// middleware\nimport requireJwtAuth from '../../middleware/requireJwtAuth';\nimport refreshTokenMiddleware from '../../middleware/refreshAccessToken';\n\nconst router = Router();\n\n// ----------------- HELPERS --------------------\n\n// create calendar if one with the same calendarId doesn't exist\nconst createCalendar = async (data) => {\n  try {\n    const calendar = await Calendar.findOne({\n      googleCalendarId: data.googleCalendarId,\n    });\n    if (!calendar) {\n      const newCalendar = await Calendar.create(data);\n      return newCalendar;\n    } else {\n      return calendar;\n    }\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst createAssignments = async (calendarId, data) => {\n  try {\n    // Extract googleEventIds from incoming data for comparison\n    const assignmentIds = data.map((assignment) => assignment.googleEventId);\n\n    // Find existing assignments by googleEventId\n    const existingAssignments = await Assignment.find({\n      googleEventId: { $in: assignmentIds },\n    });\n\n    // Filter out existing assignments\n    const existingAssignmentIds = existingAssignments.map((assignment) => assignment.googleEventId);\n    const newAssignmentsData = data.filter((assignment) => !existingAssignmentIds.includes(assignment.googleEventId));\n\n    // Insert new assignments (if any)\n    const newAssignments = await Assignment.insertMany(newAssignmentsData);\n\n    if (calendarId) {\n      const calendar = await Calendar.findOne({ googleCalendarId: calendarId });\n      if (!calendar) {\n        return { message: 'Calendar not found' };\n      }\n\n      // Extract IDs of newly created assignments\n      const assignmentIds = newAssignments.map((assignment) => assignment._id);\n\n      // Add valid assignmentIds to the calendar's assignments field\n      calendar.assignments.push(...assignmentIds);\n\n      await calendar.save();\n    }\n\n    return newAssignments;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// Get assignments belonging to a specific calendar\nconst getAssignmentsByCalendarId = async (calendarId) => {\n  try {\n    const calendar = await Calendar.findOne({\n      googleCalendarId: calendarId,\n    }).populate('assignments');\n    if (!calendar) {\n      console.error('Calendar not found');\n    }\n    return calendar.assignments;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// handles post-processing of data from Google Calendar API\n/*\n1. Create calendar in database if it doesn't exist\n2. get assignments belonging to the calendar (basically refresh the calendar with new assignments)\n3. Save events to database if they don't already exist (also associate them with the calendar)\n4. Filter out completed assignments\n5. Add any other filters here!!!!!\n6. Sort assignments\n7. Send back _id, name, dueDate, completed, and reminders array\n*/\nconst postProcess = async (data, googleId, timeZone, calendarId) => {\n  // create calendar in database if it doesn't exist\n  const calendarData = {\n    googleId: googleId,\n    googleCalendarId: calendarId,\n    assignments: [],\n  };\n\n  await createCalendar(calendarData);\n\n  const newData = data.map((event) => ({\n    googleEventId: event.id,\n    name: event.summary,\n    dueDate: event.start.dateTime || event.start.date,\n  }));\n\n  // for each assignment, if its dueDate does not have a time, set the time to 11:59 PM and set to UTC time\n  newData.forEach((assignment) => {\n    if (!assignment.dueDate.includes('T')) {\n      assignment.dueDate = DateTime.fromISO(assignment.dueDate, {\n        zone: timeZone,\n      })\n        .set({ hour: 23, minute: 59 })\n        .toUTC()\n        .toISO();\n    }\n  });\n\n  // save events to database if they don't already exist (also associate them with the calendar)\n  await createAssignments(calendarId, newData);\n\n  // ----------------- FILTERS --------------------\n  const assignments = await getAssignmentsByCalendarId(calendarId);\n\n  // filter out completed assignments\n  // const filteredAssignments = assignments.filter((assignment) => !assignment.completed);\n\n  // add any other filters here!!!!!\n\n  // sends back _id, name, dueDate, completed, and reminders array\n  return assignments;\n};\n\n//------------------------- CALENDAR ROUTES --------------------------\n\n// Gets all calendars from Google Calendar API (/api/calendars/data)\n// use requireJWT and refreshAccessToken middlewares to ensure user is authenticated\n\n// router.get('/calendarData', requireJwtAuth, refreshTokenMiddleware, async (req, res) => {\n//   const response = await fetch('https://www.googleapis.com/calendar/v3/users/me/calendarList', {\n//     headers: {\n//       Authorization: `Bearer ${req.user.accessToken}`,\n//     },\n//   });\n//   if (!response) return res.status(200).json([]);\n//   const data = await response.json();\n//   return res.status(200).json(data.items);\n// });\n\n// THIS IS A HELPER FUNCTION FOR GETTING EVENTS\n// Get events from Google Calendar API\nconst getEventsFromGoogle = async (req, res) => {\n  const calendarId = req.user.calendarId;\n  const today = new Date(); // Get today's date\n  const response = await fetch(\n    `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${today.toISOString()}&maxResults=30`,\n    {\n      headers: {\n        Authorization: `Bearer ${req.user.accessToken}`,\n      },\n    },\n  );\n  return response;\n};\n\n// returns events from our database refreshed from Google Calendar API (/api/calendars/events)\nrouter.get('/events', requireJwtAuth, refreshTokenMiddleware, async (req, res) => {\n  let timeZone = '';\n  try {\n    if (!req.user.calendarId) {\n      const user = await User.findOne({ _id: req.user._id }).exec();\n      if (!user || !user.calendarId) {\n        return res.status(404).json({ message: 'Calendar ID not found' });\n      } else {\n        req.user.calendarId = user.calendarId;\n      }\n    }\n    const response = await getEventsFromGoogle(req, res);\n    if (response.status === 200) {\n      const data = await response.json();\n      timeZone = data.timeZone;\n      const postProcessedData = await postProcess(data.items, req.user.googleId, timeZone, req.user.calendarId);\n\n      return res.status(200).json(postProcessedData);\n    }\n  } catch (error) {\n    console.error(error);\n    return res.status(400).json([]);\n  }\n  return res.status(400).json([]);\n});\n\n// Get a specific calendar by ID (/api/calendars/calendarById/:id)\nrouter.get('/calendarById/:id', requireJwtAuth, refreshTokenMiddleware, async (req, res) => {\n  const { id } = req.params;\n  try {\n    const calendar = await Calendar.findById(id);\n    if (!calendar) {\n      return res.status(404).json({ message: 'Calendar not found' });\n    }\n    res.status(200).json(calendar);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\nexport default router;\n"],"mappings":";;;;;;AAQA,IAAAA,eAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,mBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAAyE,SAAAD,uBAAAG,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AATzE;AACA,MAAMG,IAAI,GAAGL,OAAO,CAAC,mBAAmB,CAAC;AACzC,MAAMM,QAAQ,GAAGN,OAAO,CAAC,uBAAuB,CAAC;AACjD,MAAMO,UAAU,GAAGP,OAAO,CAAC,yBAAyB,CAAC;AACrD,MAAM;EAAEQ;AAAS,CAAC,GAAGR,OAAO,CAAC,OAAO,CAAC;AACrC,MAAM;EAAES;AAAO,CAAC,GAAGT,OAAO,CAAC,SAAS,CAAC;;AAErC;;AAIA,MAAMU,MAAM,GAAGD,MAAM,CAAC,CAAC;;AAEvB;;AAEA;AACA,MAAME,cAAc,GAAG,MAAOC,IAAI,IAAK;EACrC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,QAAQ,CAACQ,OAAO,CAAC;MACtCC,gBAAgB,EAAEH,IAAI,CAACG;IACzB,CAAC,CAAC;IACF,IAAI,CAACF,QAAQ,EAAE;MACb,MAAMG,WAAW,GAAG,MAAMV,QAAQ,CAACW,MAAM,CAACL,IAAI,CAAC;MAC/C,OAAOI,WAAW;IACpB,CAAC,MAAM;MACL,OAAOH,QAAQ;IACjB;EACF,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACtB;AACF,CAAC;AAED,MAAME,iBAAiB,GAAG,MAAAA,CAAOC,UAAU,EAAET,IAAI,KAAK;EACpD,IAAI;IACF;IACA,MAAMU,aAAa,GAAGV,IAAI,CAACW,GAAG,CAAEC,UAAU,IAAKA,UAAU,CAACC,aAAa,CAAC;;IAExE;IACA,MAAMC,mBAAmB,GAAG,MAAMnB,UAAU,CAACoB,IAAI,CAAC;MAChDF,aAAa,EAAE;QAAEG,GAAG,EAAEN;MAAc;IACtC,CAAC,CAAC;;IAEF;IACA,MAAMO,qBAAqB,GAAGH,mBAAmB,CAACH,GAAG,CAAEC,UAAU,IAAKA,UAAU,CAACC,aAAa,CAAC;IAC/F,MAAMK,kBAAkB,GAAGlB,IAAI,CAACmB,MAAM,CAAEP,UAAU,IAAK,CAACK,qBAAqB,CAACG,QAAQ,CAACR,UAAU,CAACC,aAAa,CAAC,CAAC;;IAEjH;IACA,MAAMQ,cAAc,GAAG,MAAM1B,UAAU,CAAC2B,UAAU,CAACJ,kBAAkB,CAAC;IAEtE,IAAIT,UAAU,EAAE;MACd,MAAMR,QAAQ,GAAG,MAAMP,QAAQ,CAACQ,OAAO,CAAC;QAAEC,gBAAgB,EAAEM;MAAW,CAAC,CAAC;MACzE,IAAI,CAACR,QAAQ,EAAE;QACb,OAAO;UAAEsB,OAAO,EAAE;QAAqB,CAAC;MAC1C;;MAEA;MACA,MAAMb,aAAa,GAAGW,cAAc,CAACV,GAAG,CAAEC,UAAU,IAAKA,UAAU,CAACY,GAAG,CAAC;;MAExE;MACAvB,QAAQ,CAACwB,WAAW,CAACC,IAAI,CAAC,GAAGhB,aAAa,CAAC;MAE3C,MAAMT,QAAQ,CAAC0B,IAAI,CAAC,CAAC;IACvB;IAEA,OAAON,cAAc;EACvB,CAAC,CAAC,OAAOf,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACtB;AACF,CAAC;;AAED;AACA,MAAMsB,0BAA0B,GAAG,MAAOnB,UAAU,IAAK;EACvD,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMP,QAAQ,CAACQ,OAAO,CAAC;MACtCC,gBAAgB,EAAEM;IACpB,CAAC,CAAC,CAACoB,QAAQ,CAAC,aAAa,CAAC;IAC1B,IAAI,CAAC5B,QAAQ,EAAE;MACbM,OAAO,CAACD,KAAK,CAAC,oBAAoB,CAAC;IACrC;IACA,OAAOL,QAAQ,CAACwB,WAAW;EAC7B,CAAC,CAAC,OAAOnB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACtB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwB,WAAW,GAAG,MAAAA,CAAO9B,IAAI,EAAE+B,QAAQ,EAAEC,QAAQ,EAAEvB,UAAU,KAAK;EAClE;EACA,MAAMwB,YAAY,GAAG;IACnBF,QAAQ,EAAEA,QAAQ;IAClB5B,gBAAgB,EAAEM,UAAU;IAC5BgB,WAAW,EAAE;EACf,CAAC;EAED,MAAM1B,cAAc,CAACkC,YAAY,CAAC;EAElC,MAAMC,OAAO,GAAGlC,IAAI,CAACW,GAAG,CAAEwB,KAAK,KAAM;IACnCtB,aAAa,EAAEsB,KAAK,CAACC,EAAE;IACvBC,IAAI,EAAEF,KAAK,CAACG,OAAO;IACnBC,OAAO,EAAEJ,KAAK,CAACK,KAAK,CAACC,QAAQ,IAAIN,KAAK,CAACK,KAAK,CAACE;EAC/C,CAAC,CAAC,CAAC;;EAEH;EACAR,OAAO,CAACS,OAAO,CAAE/B,UAAU,IAAK;IAC9B,IAAI,CAACA,UAAU,CAAC2B,OAAO,CAACnB,QAAQ,CAAC,GAAG,CAAC,EAAE;MACrCR,UAAU,CAAC2B,OAAO,GAAG3C,QAAQ,CAACgD,OAAO,CAAChC,UAAU,CAAC2B,OAAO,EAAE;QACxDM,IAAI,EAAEb;MACR,CAAC,CAAC,CACCc,GAAG,CAAC;QAAEC,IAAI,EAAE,EAAE;QAAEC,MAAM,EAAE;MAAG,CAAC,CAAC,CAC7BC,KAAK,CAAC,CAAC,CACPC,KAAK,CAAC,CAAC;IACZ;EACF,CAAC,CAAC;;EAEF;EACA,MAAM1C,iBAAiB,CAACC,UAAU,EAAEyB,OAAO,CAAC;;EAE5C;EACA,MAAMT,WAAW,GAAG,MAAMG,0BAA0B,CAACnB,UAAU,CAAC;;EAEhE;EACA;;EAEA;;EAEA;EACA,OAAOgB,WAAW;AACpB,CAAC;;AAED;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM0B,mBAAmB,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EAC9C,MAAM5C,UAAU,GAAG2C,GAAG,CAACE,IAAI,CAAC7C,UAAU;EACtC,MAAM8C,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC,CAAC,CAAC;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,oDAAmDjD,UAAW,mBAAkB8C,KAAK,CAACI,WAAW,CAAC,CAAE,gBAAe,EACpH;IACEC,OAAO,EAAE;MACPC,aAAa,EAAG,UAAST,GAAG,CAACE,IAAI,CAACQ,WAAY;IAChD;EACF,CACF,CAAC;EACD,OAAOL,QAAQ;AACjB,CAAC;;AAED;AACA3D,MAAM,CAACiE,GAAG,CAAC,SAAS,EAAEC,uBAAc,EAAEC,2BAAsB,EAAE,OAAOb,GAAG,EAAEC,GAAG,KAAK;EAChF,IAAIrB,QAAQ,GAAG,EAAE;EACjB,IAAI;IACF,IAAI,CAACoB,GAAG,CAACE,IAAI,CAAC7C,UAAU,EAAE;MACxB,MAAM6C,IAAI,GAAG,MAAM7D,IAAI,CAACS,OAAO,CAAC;QAAEsB,GAAG,EAAE4B,GAAG,CAACE,IAAI,CAAC9B;MAAI,CAAC,CAAC,CAAC0C,IAAI,CAAC,CAAC;MAC7D,IAAI,CAACZ,IAAI,IAAI,CAACA,IAAI,CAAC7C,UAAU,EAAE;QAC7B,OAAO4C,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAE7C,OAAO,EAAE;QAAwB,CAAC,CAAC;MACnE,CAAC,MAAM;QACL6B,GAAG,CAACE,IAAI,CAAC7C,UAAU,GAAG6C,IAAI,CAAC7C,UAAU;MACvC;IACF;IACA,MAAMgD,QAAQ,GAAG,MAAMN,mBAAmB,CAACC,GAAG,EAAEC,GAAG,CAAC;IACpD,IAAII,QAAQ,CAACU,MAAM,KAAK,GAAG,EAAE;MAC3B,MAAMnE,IAAI,GAAG,MAAMyD,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCpC,QAAQ,GAAGhC,IAAI,CAACgC,QAAQ;MACxB,MAAMqC,iBAAiB,GAAG,MAAMvC,WAAW,CAAC9B,IAAI,CAACsE,KAAK,EAAElB,GAAG,CAACE,IAAI,CAACvB,QAAQ,EAAEC,QAAQ,EAAEoB,GAAG,CAACE,IAAI,CAAC7C,UAAU,CAAC;MAEzG,OAAO4C,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACC,iBAAiB,CAAC;IAChD;EACF,CAAC,CAAC,OAAO/D,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO+C,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EACjC;EACA,OAAOf,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;AACjC,CAAC,CAAC;;AAEF;AACAtE,MAAM,CAACiE,GAAG,CAAC,mBAAmB,EAAEC,uBAAc,EAAEC,2BAAsB,EAAE,OAAOb,GAAG,EAAEC,GAAG,KAAK;EAC1F,MAAM;IAAEjB;EAAG,CAAC,GAAGgB,GAAG,CAACmB,MAAM;EACzB,IAAI;IACF,MAAMtE,QAAQ,GAAG,MAAMP,QAAQ,CAAC8E,QAAQ,CAACpC,EAAE,CAAC;IAC5C,IAAI,CAACnC,QAAQ,EAAE;MACb,OAAOoD,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAE7C,OAAO,EAAE;MAAqB,CAAC,CAAC;IAChE;IACA8B,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACnE,QAAQ,CAAC;EAChC,CAAC,CAAC,OAAOK,KAAK,EAAE;IACd+C,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAE9D,KAAK,EAAEA,KAAK,CAACiB;IAAQ,CAAC,CAAC;EAChD;AACF,CAAC,CAAC;AAAC,IAAAkD,QAAA,GAAAC,OAAA,CAAAlF,OAAA,GAEYM,MAAM"}