{"version":3,"file":"assignments.js","names":["_requireJwtAuth","_interopRequireDefault","require","_refreshAccessToken","obj","__esModule","default","Assignment","Calendar","Router","router","put","requireJwtAuth","req","res","id","params","assignment","findById","console","error","status","json","completed","updatedAssignment","save","confirmedCompleted","post","calendarId","user","name","dueDate","type","difficulty","reminders","body","cleanedUpReminders","undefined","Array","newAssignment","create","foundAssignment","findOne","_id","calendar","googleCalendarId","assignments","push","values","findByIdAndUpdate","new","_default","exports"],"sources":["../../../src/routes/api/assignments.js"],"sourcesContent":["const Assignment = require('../../models/Assignment');\nconst Calendar = require('../../models/Calendar');\nconst { Router } = require('express');\n\nconst router = Router();\n\n// middleware to check if user is logged in and to refresh access token if needed\nimport requireJwtAuth from '../../middleware/requireJwtAuth';\nimport refreshTokenMiddleware from '../../middleware/refreshAccessToken';\n\n// --------------------- COMPLETE Assignment --------------------- //\n\n// Complete or uncomplete assignment by ID (/api/assignments/complete/:id)\nrouter.put('/complete/:id', requireJwtAuth, async (req, res) => {\n  const id = req.params.id;\n  try {\n    const assignment = await Assignment.findById(id);\n    if (!assignment) {\n      console.error('Assignment not found');\n      return res.status(404).json({ error: 'Assignment not found' });\n    }\n\n    assignment.completed = !assignment.completed; // Reverse the completed boolean\n    const updatedAssignment = await assignment.save();\n    res.status(200).json(updatedAssignment);\n  } catch (error) {\n    res.status(400).json(error);\n  }\n});\n\n// confirm assignment completion by ID (/api/assignments/confirm/:id)\nrouter.put('/confirm/:id', requireJwtAuth, async (req, res) => {\n  const id = req.params.id;\n  try {\n    const assignment = await Assignment.findById(id);\n    if (!assignment) {\n      console.error('Assignment not found');\n      return res.status(404).json({ error: 'Assignment not found' });\n    }\n\n    assignment.confirmedCompleted = true;\n    const updatedAssignment = await assignment.save();\n    res.status(200).json(updatedAssignment);\n  } catch (error) {\n    res.status(400).json(error);\n  }\n});\n\n// --------------------- Add Assignment --------------------- //\n\n// add an assignment to a calendar by calendar id (/api/assignments/add/:id)\nrouter.post('/add', requireJwtAuth, async (req, res) => {\n  const calendarId = req.user.calendarId;\n  const { name, dueDate, type, difficulty, reminders } = req.body;\n\n  let cleanedUpReminders;\n  if (reminders === undefined || reminders === null || reminders === '') {\n    cleanedUpReminders = [];\n  } else {\n    cleanedUpReminders = new Array(reminders);\n  }\n  try {\n    const newAssignment = await Assignment.create({\n      name,\n      dueDate,\n      type,\n      difficulty,\n      reminders: cleanedUpReminders,\n    });\n\n    // check if it was created in the db by searcfhing for it\n    const foundAssignment = await Assignment.findOne({\n      _id: newAssignment._id,\n    });\n    if (!foundAssignment) {\n      console.error('Assignment not found');\n      return res.status(404).json({ error: 'Assignment not successfully added to db' });\n    }\n\n    // Add assignment to user's calendar\n    const calendar = await Calendar.findOne({ googleCalendarId: calendarId });\n    calendar.assignments.push(newAssignment);\n    await calendar.save();\n\n    res.status(200).json(newAssignment);\n  } catch (error) {\n    console.error(error);\n    res.status(400).json(error);\n  }\n});\n\n// update entire assignment by ID (/api/assignments/update/:id)\nrouter.put('/update/:id', requireJwtAuth, async (req, res) => {\n  const id = req.params.id;\n  const { type, difficulty, reminders } = req.body.values;\n  try {\n    const updatedAssignment = await Assignment.findByIdAndUpdate(id, { type, difficulty, reminders }, { new: true });\n    if (!updatedAssignment) {\n      console.error('Assignment not found');\n    }\n    res.status(200).json(updatedAssignment);\n  } catch (error) {\n    res.status(400).json(error);\n  }\n});\n\n// const getAssignmentDueDateByGoogleEventId = async (calendarId, googleEventId, accessToken) => {\n//   // get due date from google calendar api\n//   // use  https://www.googleapis.com/calendar/v3/calendars/calendarId/events/eventId\n//   const event = fetch(`https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${googleEventId}`, {\n//     method: 'GET',\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: `Bearer ${accessToken}`,\n//     },\n//   })\n//     .then((res) => res.json())\n//     .then((json) => {\n//       console.log('json is ', json);\n//       return json;\n//     })\n//     .catch((err) => {\n//       console.error(err);\n//     });\n// };\n\n// const refreshDueDates = async (req, res) => {\n//   const calendarId = req.user.calendarId;\n//   console.log('calendarId is ', calendarId);\n//   // get all assignments attached to calendar\n//   const calendar = await Calendar.findOne({ googleCalendarId: calendarId });\n//   const assignments = calendar.assignments;\n//   console.log('assignments are ', assignments);\n//   // for each assignment, get the due date from google calendar api and update the assignment in the db\n//   // need to get mongodb assignment object\n//   const accessToken = req.user.accessToken;\n//   const updatedAssignments = await Promise.all(\n//     assignments.map(async (assignment) => {\n//       console.log('assignment is ', assignment);\n//       console.log('google event id is ', assignment.googleEventId);\n//       const dueDate = await getAssignmentDueDateByGoogleEventId(calendarId, assignment.googleEventId, accessToken);\n//       const updatedAssignment = await Assignment.findByIdAndUpdate(assignment._id, { dueDate }, { new: true });\n//       return updatedAssignment;\n//     }),\n//   );\n//   res.status(200).json(updatedAssignments);\n// };\n\nexport default router;\n"],"mappings":"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"}